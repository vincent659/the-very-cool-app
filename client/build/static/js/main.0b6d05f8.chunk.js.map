{"version":3,"sources":["components/layout/Footer.js","components/layout/Layout.js","components/Jumbotron.js","components/layout/Navigation.js","components/Chart.js","components/FontawesomeIcons/faicon.js","components/SearchTwitter.js","Home.js","App.js","serviceWorker.js","index.js","assets/love-data.jpg","assets/rights.jpg"],"names":["Styles","styled","div","Footer","className","Date","getFullYear","Layout","props","Container","children","loveData","Jumbotron","fluid","Navigation","Navbar","Brand","src","rights","alt","variant","Chart","useState","chartLabel","setChartLabel","chartData","setChartData","tweetRange","useEffect","i","data","length","push","defaultProps","displayTitle","displayLegend","legendPosition","title","name","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","options","display","text","fontSize","legend","position","scales","xAxes","gridLines","scaleLabel","labelString","yAxes","library","add","faMeh","faFrown","faLaughBeam","SearchTwitter","keyTerm","setKeyTerm","tweetPosts","setTweetPosts","sentimentAvgScore","setSentimentAvgScore","sentimentScores","setSentimentScores","error","setError","query","search","msg","axios","post","then","statuses","total","scores","catch","e","onSubmit","preventDefault","handleSubmit","InputGroup","value","onChange","target","Prepend","Button","as","type","FormControl","aria-describedby","toFixed","icon","size","color","map","index","Card","key","Header","user","profile_image_url","screen_name","created_at","Body","Text","Home","match","setText","articles","params","App","Fragment","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0b6d05f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .footer {\r\n    position: relative;\r\n    bottom: 0;\r\n    width: 100%;\r\n    height: 2.5rem;\r\n  }\r\n`;\r\nexport const Footer = () => {\r\n  return (\r\n    <Styles>\r\n      <footer className=\"mt-4\">\r\n        <div className=\"footer\">\r\n          &copy; TheMovement {new Date().getFullYear()}\r\n        </div>\r\n      </footer>\r\n    </Styles>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {Container} from 'react-bootstrap';\r\n\r\n/* Layout Page that implements Container */\r\nexport const Layout = (props) => {\r\n    return (\r\n        <Container>\r\n            {props.children}\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Jumbotron as Jumbo, Container } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport loveData from '../assets/love-data.jpg';\r\n\r\nconst Styles = styled.div`\r\n  .jumbo {\r\n    background: url(${loveData}) no-repeat fixed bottom;\r\n    background-size: cover;\r\n    color: #cccccc;\r\n    height: 300px;\r\n    position: relative;\r\n    z-index: -2;\r\n  }\r\n\r\n  .overlay {\r\n    background-color: #000;\r\n    opacity: 0.6;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: -1;\r\n  }\r\n`;\r\n\r\n/* Jumbotron for calling extra attention on the header */\r\nexport const Jumbotron = () => {\r\n  return (\r\n    <Styles>\r\n      <Jumbo fluid className=\"jumbo\">\r\n        <div className=\"overlay\"></div>\r\n        <Container>\r\n          <h1 className=\"text-left\">Tweet Analysis</h1>\r\n          <p className=\"text-justify\">\r\n            Sentiment analysis is extremely useful in social media monitoring as\r\n            it allows us to gain an overview of the wider public opinion behind\r\n            certain topics\r\n          </p>\r\n          <p className=\"text-justify\">\r\n            The applications of sentiment analysis are broad and powerful. The\r\n            ability to extract insights from social data is a practice that is\r\n            being widely adopted by organisations across the world.\r\n          </p>\r\n        </Container>\r\n      </Jumbo>\r\n    </Styles>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport rights from '../../assets/rights.jpg';\r\n\r\nconst Styles = styled.div`\r\n  .navbar {\r\n    background-color: white;\r\n    text-align: left;\r\n  }\r\n\r\n  .photo {\r\n    height: 40px;\r\n    width: 40px;\r\n    margin-bottom: 1.5rem;\r\n  }\r\n\r\n  .navbar-brand,\r\n  .navbar-nav .nav-link {\r\n    color: black;\r\n\r\n    &:hover {\r\n      color: grey;\r\n    }\r\n  }\r\n`;\r\n\r\n/* Navigation Bar */\r\nexport const Navigation = () => {\r\n  return (\r\n    <Styles>\r\n      <Navbar>\r\n        <Navbar.Brand>\r\n          <img src={rights} className=\"photo\" alt=\"\" />\r\n          <span className=\"h1\" variant=\"secondary\">\r\n            TheMovement\r\n          </span>\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </Styles>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Bar, Line } from 'react-chartjs-2';\r\n\r\n/* React ChartJS */\r\nexport const Chart = (props) => {\r\n  const [chartLabel, setChartLabel] = useState([]);\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  let tweetRange = [];\r\n\r\n  useEffect(() => {\r\n    for (let i = 0; i < props.data.length; i++) {\r\n      tweetRange.push(i + 1);\r\n    }\r\n    setChartLabel(tweetRange);\r\n    setChartData(props.data);\r\n  }, [props.data]);\r\n\r\n  Chart.defaultProps = {\r\n    displayTitle: true,\r\n    displayLegend: true,\r\n    legendPosition: 'right',\r\n    title: props.name,\r\n  };\r\n\r\n  // ChartJS\r\n  const data = {\r\n    labels: chartLabel,\r\n    datasets: [\r\n      {\r\n        label: 'Sentiment Scores',\r\n        fill: false,\r\n        backgroundColor: 'rgba(75,192,192,0.4)',\r\n        borderColor: 'rgba(255, 0, 0, 0.3)',\r\n        borderWidth: 5,\r\n        pointBorderColor: 'rgba(75,192,192,1)',\r\n        pointBackgroundColor: '#fff',\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 2,\r\n        pointHitRadius: 10,\r\n        data: chartData,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <Line\r\n        data={data}\r\n        options={{\r\n          title: {\r\n            display: props.displayTitle,\r\n            text: 'Topic: ' + props.title,\r\n            fontSize: 25,\r\n          },\r\n          legend: {\r\n            display: props.displayLegend,\r\n            position: props.legendPosition,\r\n          },\r\n          scales: {\r\n            xAxes: [\r\n              {\r\n                gridLines: {\r\n                  display: false,\r\n                },\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: 'Tweets',\r\n                },\r\n              },\r\n            ],\r\n            yAxes: [\r\n              {\r\n                scaleLabel: {\r\n                  display: true,\r\n                  labelString: 'Scores',\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { faMeh, faFrown, faLaughBeam } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faMeh, faFrown, faLaughBeam);\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport { Chart } from './Chart';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport './FontawesomeIcons/faicon';\r\n\r\nconst SearchTwitter = (props) => {\r\n  const [keyTerm, setKeyTerm] = useState([]);\r\n  const [tweetPosts, setTweetPosts] = useState([]);\r\n  const [sentimentAvgScore, setSentimentAvgScore] = useState('');\r\n  const [sentimentScores, setSentimentScores] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (props.query != null) {\r\n      const search = { msg: props.query };\r\n\r\n      axios\r\n        .post(`/api/v1/mashup/tweets`, search)\r\n        .then((data) => {\r\n          setError(null);\r\n          if (data.data.statuses.length > 0) {\r\n            setTweetPosts(data.data.statuses);\r\n            setSentimentAvgScore(data.data.total);\r\n            setSentimentScores(data.data.scores);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          setError(e);\r\n        });\r\n    }\r\n  }, [props.query]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (keyTerm == '') {\r\n      setError(e);\r\n    } else {\r\n      const search = { msg: keyTerm };\r\n\r\n      axios\r\n        .post(`/api/v1/mashup/tweets`, search)\r\n        .then((data) => {\r\n          setError(null);\r\n          if (data.data.statuses.length > 0) {\r\n            setTweetPosts(data.data.statuses);\r\n            setSentimentAvgScore(data.data.total);\r\n            setSentimentScores(data.data.scores);\r\n          } else {\r\n            setError(e);\r\n          }\r\n        })\r\n        .catch((e) => {\r\n          setError(e);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={(e) => handleSubmit(e)}>\r\n        <InputGroup\r\n          value={keyTerm}\r\n          onChange={(e) => setKeyTerm(e.target.value)}\r\n        >\r\n          <InputGroup.Prepend>\r\n            <Button\r\n              as=\"input\"\r\n              type=\"submit\"\r\n              value=\"Submit\"\r\n              variant=\"outline-secondary\"\r\n            ></Button>\r\n          </InputGroup.Prepend>\r\n          <FormControl aria-describedby=\"basic-addon1\" />\r\n        </InputGroup>\r\n      </form>\r\n      {error ? (\r\n        <div className=\"text-danger\">\r\n          No related tweets found. Please try to use another keyword or phrase\r\n        </div>\r\n      ) : (\r\n        ''\r\n      )}\r\n      <h1>{`Average sentiment score for '${keyTerm}': ${\r\n        sentimentAvgScore == 0 ? '' : sentimentAvgScore.toFixed(3)\r\n      }`}</h1>\r\n      <h1>\r\n        {sentimentAvgScore >= 0.1 ? (\r\n          <FontAwesomeIcon icon=\"laugh-beam\" size=\"lg\" color=\"yellow\" />\r\n        ) : sentimentAvgScore <= -0.1 ? (\r\n          <FontAwesomeIcon icon=\"frown\" size=\"lg\" color=\"blue\" />\r\n        ) : (\r\n          <FontAwesomeIcon icon=\"meh\" size=\"lg\" color=\"black\" />\r\n        )}\r\n      </h1>\r\n\r\n      <Chart data={sentimentScores} name={keyTerm} />\r\n      <h1>\r\n        {/* The total scores for{' '} */}\r\n        {`Total tweets displayed: ${sentimentScores.length}`}\r\n      </h1>\r\n      {tweetPosts.map((data, index) => (\r\n        <Card className=\"my-2\" key={index}>\r\n          <Card.Header\r\n            as=\"h5\"\r\n            className=\"d-flex justify-content-between align-items-center\"\r\n          >\r\n            {/* <div>Tweet {index + 1} </div> */}\r\n            <div>\r\n              <img\r\n                src={data.user.profile_image_url}\r\n                alt=\"\"\r\n                className=\"rounded-circle mr-2\"\r\n              />\r\n              {data.user.screen_name}\r\n            </div>\r\n            <div>{data.created_at}</div>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>{data.text}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchTwitter;\r\n","import React, { useState } from 'react';\r\nimport SearchTwitter from './components/SearchTwitter';\r\n// import { RouteComponentProps } from 'react-router-dom';\r\n\r\nconst Home = (match) => {\r\n  const [text, setText] = useState([]);\r\n  const [extraKey, setExtraKey] = useState([]);\r\n\r\n  // console.log(match.match.params.query);\r\n  // console.log(location);\r\n\r\n  const handleSubmit = (data) => {\r\n    setText(data.data.msg.articles);\r\n  };\r\n\r\n  const handleExtraKeyword = (keyword) => {\r\n    setExtraKey(keyword);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h6 className=\"mb-4 text-left\">\r\n        Please enter a keyword or phrase to perform search for relevant tweets.\r\n      </h6>\r\n      <SearchTwitter search={handleSubmit} query={match.match.params.query} />\r\n      <hr />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from 'react';\r\nimport { Footer } from './components/layout/Footer';\r\nimport { Layout } from './components/layout/Layout';\r\nimport { Jumbotron } from './components/Jumbotron';\r\nimport { Navigation } from './components/layout/Navigation';\r\nimport Home from './Home';\r\n// import SearchTwitter from './components/SearchTwitter';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\n\r\n// npm install react-bootstrap bootstrap\r\n// npm i axios\r\n// npm i styled-components\r\n// npm install react-router-dom\r\n// npm install --save react-chartjs-2 chart.js\r\n// npm i --save @fortawesome/fontawesome-svg-core\r\n// npm install --save @fortawesome/free-solid-svg-icons\r\n// npm install --save @fortawesome/react-fontawesome\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <React.Fragment>\r\n        <BrowserRouter>\r\n          <Navigation />\r\n          <Jumbotron />\r\n          <Layout>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/tweets/:query\" component={Home} />\r\n            </Switch>\r\n          </Layout>\r\n          <Footer />\r\n        </BrowserRouter>\r\n      </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/love-data.41130f9f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rights.b47e1a1d.jpg\";"],"sourceRoot":""}